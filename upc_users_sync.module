<?php 
/**
 * implementation of Hook_menu
 */
function upc_users_sync_menu() {
  $items = array();
  $items['users_sync'] = array(
    'title' => 'Crear cuenta',
    'page callback' => '_upc_users_sync_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_spread'] = array(
    'title' => 'Spread Users',
    'page callback' => '_user_spread',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_test'] = array(
    'title' => 'Test Users',
    'page callback' => '_user_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
function _upc_users_sync_create() {
 $user = unserialize(bakery_decrypt($_POST['form']));
  $user = $user['#user'];

  $new_account = _map_user($user);
  error_log(print_r($user,1));
  error_log('                ||  ');
  error_log('                ||  ');
  error_log('                ||  ');
  error_log('                ||  ');
  error_log('                \/  ');
  $account = user_save(NULL, $new_account);
  error_log(print_r($account,1));
  return 'hola';
}

/**
 * Send user information to all sites.
 */
function _user_register_submit($form, &$form_state) {

  //send term name too
  error_log($form['#user']->pass);
  error_log(print_r($form['#user']->password,1));
  foreach ($form['#user'] as $index => $value) {
    error_log($index);
    if (is_array($form['#user']->{$index})) {
      if (isset($form['#user']->{$index}['und'][0]['tid'])) {
        foreach($form['#user']->{$index}['und'] as $i => $a) {
          $term = taxonomy_term_load($form['#user']->{$index}['und'][$i]['tid']);
          $term = $term->name;
          $form['#user']->{$index}['und'][$i]['term'] = $term;
        }
      }
    }
  }

  $sites = array_merge(_get_slaves(), array(_get_master())); 
  $local = 'http://' .  $_SERVER['SERVER_NAME'] . '/';
  foreach($sites as $site) {
    if($site != $local) {
       error_log('shoot to : ' . $local);
      _post_curl($form, $site . 'users_sync');
    }
  }
}

function _user_profile_form_submit() {}
/**
 * Implementation of hook_form_alter
 * Triggers _user_check function when submitting the register form
 */
function upc_users_sync_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['#submit'] = array();
    //overrides default and bakery submit functions
    //default, graba en local
    $form['#submit'][] = 'user_register_submit';  
    //graba en los demas
    $form['#submit'][] = '_user_register_submit'; 
  }
  if($form_id == 'user_profile_form') {
    //Agregamos o reemplazamos? 
    //probemos redirigir a master y ahi editamos y luego regresamos
    // $form['#submit'] = array();
    //$form['#submit'][] = '_user_register_submit';  
      $form = array();
      $form_state = array();
    if (!variable_get('bakery_is_master', 0) && !user_access('administer users')) {
      $init_url = _bakery_init_field_url($form['#user']->init);
      unset($form);
      unset($form_state);
      $form = array();
      $form_state = array();

    }
  }
}

function _post_curl($form,  $url) {
  //cURL version
  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_URL => $url,
    CURLOPT_POST => 1,
    CURLOPT_POSTFIELDS => array(
        'url' => 'http://' . $_SERVER['SERVER_NAME'] ,
        'form' => bakery_encrypt(serialize($form)),
    ),
  ));
  $resp = curl_exec($curl);
  if (!$resp) {
    drupal_set_message(t('Error %error for site at %url', array('%error' => curl_error($curl) .' '. curl_errno($curl), '%url' => $url)));
  } else {
    //drupal_set_message($resp);
    drupal_set_message(t('Cuenta creada en %url', array('%url' => $url)));
  }
}
/**
 * Create User Array
 * Collect information from post and create an user array
 * to be use in user_save function
 * @return array $user
 */
function _map_user($post) {
  $user = array();
  $map = _user_fields();

  $user['init'] = $post->mail;
  $user['status'] = 1;
  $user['pass'] = $post->password;
  foreach ($map as $index => $value) {
    switch ($value) {
      case 'direct':
        $user[$index] = $post->{$index};
        break;
      case 'value': 
        $user[$index] = array('und' => array(0 => array('value' => $post->{$index}['und'][0]['value'])));
        break;
      case 'tid':
        //@todo add vocabulary
        $term = taxonomy_get_term_by_name($post->{$index}['und'][0]['term']);
        $term = current($term);
        $user[$index] = array('und' => array(0 => array('tid' => $term->tid)));
        break;
      case 'multiple':
        $multiple = $post->{$index}['und'];
        foreach($multiple as $i => $value) {
          //@todo add vocabulary
          $term = taxonomy_get_term_by_name($post->{$index}['und'][$i]['term']); 
          $term = current($term); 
          $user[$index]['und'][$i]['tid'] = $term->tid;
        }
        break;
    }
  }
  //complete user information
  /*if(!empty($userinfo['authname_bakery'])) {
    $user['authname_bakery'] = $userinfo['authname_bakery'];
  }*/
  return $user;
}
/**
 * List of available fields
 */
function _user_fields(){ 
  return array(
    'name' => 'direct',
    'mail' => 'direct',
    //'pass' => 'direct',
    'timezone' => 'direct',
    'field_permission_marketing' => 'value',
    /*
    'field_permission_marketing_epe',
    'field_permission_marketing_pos',
    'field_permission_marketing_pre',
    */
    'field_user_address' => 'value',
    'field_user_address_city' => 'value',
    'field_user_address_ubigeo' => 'tid',
    'field_user_address_urba' => 'value',
    'field_user_address_via' => 'tid',
    'field_user_birthday' => 'value',
    'field_document' => 'value',
    'field_document_type_term' => 'tid',
    'field_user_business_doc_type' => 'tid',
    'field_user_business_document' => 'value',
    'field_user_business_hq_address' => 'value',
    'field_user_business_hq_city' => 'value',
    'field_user_business_hq_phone' => 'value',
    'field_user_business_hq_ubigeo' => 'tid',
    'field_user_business_hq_urba' => 'value',
    'field_user_business_hq_via' => 'tid',
    'field_user_business_mail' => 'value',
    'field_user_business_name' => 'value',
    'field_user_courtesy_title_term' => 'tid', 
    'field_user_firstname' => 'value',
    'field_user_grade_term' => 'tid',
    'field_user_lastname' => 'value',
    'field_user_charge' => 'value',
    'field_user_level_charge' => 'tid',
    'field_user_work_area_term' => 'tid',
    'field_user_mobile_phone' => 'value',
    'field_user_mother_lastname' => 'value',
    'field_user_nationality' => 'value',
    'field_user_phone' => 'value',
    'field_user_sex' => 'value',
    'field_user_interest_area_term' => 'multiple',

    'field_user_nick' => 'value',
    'field_user_business_code' => 'value',
    'field_user_business_hq_code' => 'value',
    'field_user_business_hq_name' => 'value',
    'field_user_socrates_code' => 'value',
    'field_reusable_observation' => 'value',
  );
}
/**
 * Create or update User
 */
function _user_create($uid = null){
  if(!empty($uid)) {
    //update user
    $remote_user = _get_remote_user();
    $user = user_load($uid);
    //map information here

    #user_save($user);
    return $user->uid;
  } else {
    //create user
    $remote_user = _get_remote_user();

    #user_save($user);
    return $user->uid;
  }
}
/**
 * Slaves Sites
 * Sites where we want to create users
 * @return array of slave sites.
 */
function _get_slaves() {
  return variable_get('bakery_slaves', array());
}
/**
 * Master Site
 * @return string master site
 */
function _get_master() {
  return variable_get('bakery_master', 'http://www.upc.edu.pe/');
}
/**
 * Is Master?
 * Is this the master Site
 * @return TRUE/FALSE
 */
function _is_master() {
  return variable_get('bakery_is_master', 0);
}
