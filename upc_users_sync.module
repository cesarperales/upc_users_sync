<?php 
/**
 * implementation of Hook_menu
 */
function upc_users_sync_menu() {
  $items = array();
  $items['users_sync/check'] = array(
    'title' => 'Check',
    'page callback' => '_user_check',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_create'] = array(
    'title' => 'Crear cuenta',
    'page callback' => '_user_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_spread'] = array(
    'title' => 'Spread Users',
    'page callback' => '_user_spread',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_test'] = array(
    'title' => 'Test Users',
    'page callback' => '_user_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
function _user_test() {
  global $user;
  $new = _map_user();
  dpm($new);
  return 'hola';
}
/**
 * url called
 */
function _user_check() {
  switch($_POST['op']) {
    case 'register':
      $form_state = unserialize($_POST['form_state']);
      $form = unserialize($_POST['form']);
      #dpm($form_state);
      #dpm($_POST);
      user_register_submit($form, $form_state);
      break;
    case 'login':

      break;
  }
  return 'check';
}

/**
 * THIS IS A COPY OF BAKERY_REGISTER_RETURN() FUNCTION
 * ADDED PARTS ARE BEEN INDICATING
 * 
 * Custom return for slave registration process.
 *
 * Redirects to the homepage on success or to the register page if there was a problem.  
 */
function upc_users_sync_bakery_register_return() {
  $cookie = bakery_taste_oatmeal_cookie();

  if ($cookie) {
    // Valid cookie, now destroy it.
    _bakery_eat_cookie('OATMEAL');

    $errors = $cookie['data']['errors'];
    if (empty($errors)) {
      drupal_set_message(t('Registration successful. You are now logged in.'));
      // Redirect to front page.
      drupal_goto('<front>');
    }
    else {
      if (!empty($errors['register'])) {
        drupal_set_message(t('Registration is not enabled on @master. Please contact a site administrator.', array('@master' => variable_get('bakery_master', 'http://drupal.org/'))), 'error');
        watchdog('bakery', 'Master Bakery site user registration is disabled', array(), WATCHDOG_ERROR);
      }
      if (!empty($errors['validate'])) {
        // If the user must validate their email then we need to create an
        // account for them on the slave site.

        //THIS IS ADDED FOR UPC
        $new = _map_user();
        //END OF ADDED PART FOR UPC

        $account = user_save(new stdClass(), $new);
        // Notify the user that they need to validate their email.
        _user_mail_notify('register_no_approval_required', $account);
        unset($_SESSION['bakery']['register']);
        drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
      }
      if (!empty($errors['name'])) {
        drupal_set_message(t('Name is already taken.'), 'error');
      }
      if (!empty($errors['mail'])) {
        drupal_set_message(t('E-mail address is already registered.'), 'error');
      }
      if (!empty($errors['mail_denied'])) {
        drupal_set_message(t('The e-mail address has been denied access..'), 'error');
      }
      if (!empty($errors['name_denied'])) {
        drupal_set_message(t('The name has been denied access..'), 'error');
      }
      drupal_goto('user/register');
    }
  }
  drupal_access_denied();
}
/**
 * This is a copy of _bakery_register_submit without the redirection.
 */
function _user_register_submit($form, &$form_state) {
  $form_state_copy = $form_state;
// Create an array of fields to send to the master. We need these four fields.
  $allowed = array('name', 'mail', 'pass', 'timezone');
  foreach ($form_state['values'] as $key => $value) {
    if (!in_array($key, $allowed)) {
      unset($form_state['values'][$key]);
    }
  }
  // Remove unneeded values.
  form_state_values_clean($form_state);
  // Save values to cookie.
  $data = $form_state['values'];
  // Store name and email in case of error and return from master.
  $_SESSION['bakery']['register'] = array(
    'name' => $data['name'],
    'mail' => $data['mail'],
  );
  // Create cookie and redirect to master. 
  bakery_bake_oatmeal_cookie($data['name'], $data);
  _user_spread($form, $form_state_copy, 'register');
  //drupal_goto(variable_get('bakery_master', 'http://drupal.org/') . 'bakery');
}
/**
 * Implementation of hook_user_login
 */
function upc_users_sync_user_login(&$edit, $account) {
  #dpm($edit);
  #dpm($account);
}
/**
 * Implementation of hook_form_alter
 * Triggers _user_check function when submitting the register form
 */
function upc_users_sync_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['#submit'] = array();
    //overrides default and bakery submit functions
    //default, graba en local
    $form['#submit'][] = 'user_register_submit';  
    //graba en master
    $form['#submit'][] = '_user_register_submit'; 
  }
}

/**
 * Spread users to
 * Decide which sites are we spreading users to
 * If this is master, spread to slaves.
 * If this is slave spread to master.
 */
function _user_spread($form, $form_state, $op) {
  if(!empty($form_state)) {
    if(_is_master()) {
      //spread to slaves
      $slaves = _get_slaves();
      //not spreading to this site
      $current_site = 'http://'.$_SERVER['SERVER_NAME'];
      foreach ($slaves as $url) {
        if($url != $current_site) {
          _user_spread_to($form, $form_state, $op, $url);
        }
      }
    } else {
      //spread to master
      $url = _get_master();
      _user_spread_to($form, $form_state, $op, $url);
    }
  }
}
function _user_spread_to($form, $form_state, $op, $url) {
  //cURL version
  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_RETURNTRANSFER => 1,
    CURLOPT_URL => $url . 'users_sync/check',
    CURLOPT_POST => 1,
    CURLOPT_POSTFIELDS => array(
        'url' => 'http://' . $_SERVER['SERVER_NAME'] ,
        'form' => serialize($form),
        'form_state' => serialize($form_state),
        'op' => $op, 
    )
  ));
  $resp = curl_exec($curl);
  if (!$resp) {
    drupal_set_message(t('Error %error for site at %url', array('%error' => curl_error($curl) .' '. curl_errno($curl), '%url' => $url)));
  } else {
    drupal_set_message($resp);
  }
}
/**
 * Get local User
 * Load local user by email or username
 * @return string uid
 */
function _get_local_user(){
  //check by mail
  if(!empty($_POST['email'])) { 
    $user = user_load_by_email($_POST['email']);
    //check by username
    if(empty($user) && !empty($_POST['name'])) {
      $user = user_load_by_name($_POST['name']);
    }
    if(!empty($user)) {
      return $user->uid;
    }
    return false;
  }
}
/**
 * Create User Array
 * Collect information from cookies and post and create a user array
 * to be use in user_save
 * @return array $user
 */
function _map_user() {
  global $user;
  $post = user_load($user->uid);
  $fields = array(
    'field_permission_marketing',
    'field_permission_marketing_epe',
    'field_permission_marketing_pos',
    'field_permission_marketing_pre',
    'field_reusable_observation',
    'field_user_address',
    'field_user_address_city',
    'field_user_address_ubigeo',
    'field_user_address_urba',
    'field_user_address_via',
    'field_user_birthday',
    'field_user_business_code',
    'field_user_business_doc_type',
    'field_user_business_document',
    'field_user_business_hq_address',
    'field_user_business_hq_city',
    'field_user_business_hq_code',
    'field_user_business_hq_name',
    'field_user_business_hq_phone',
    'field_user_business_hq_ubigeo',
    'field_user_business_hq_urba',
    'field_user_business_hq_via',
    'field_user_business_mail',
    'field_user_business_name',
    'field_user_charge',
    'field_user_courtesy_title_term',
    'field_user_firstname',
    'field_user_grade_term',
    'field_user_interest_area_term',
    'field_user_lastname',
    'field_user_level_charge',
    'field_user_mobile_phone',
    'field_user_mother_lastname',
    'field_user_nationality',
    'field_user_nick',
    'field_user_phone',
    'field_user_sex',
    'field_user_socrates_code',
  );
  $new = array(
    'name' => $cookie['name'],
    'mail' => $cookie['data']['mail'],
    'init' => _bakery_init_field($cookie['data']['uid']),
    'status' => 1,
    'pass' => user_password(),
  );

  foreach ($post as $label => $value) {
    if(in_array($label, $fields)) {
      $new[$label] = $post->$label;
    }
  }
  return $new;
}
/**
 * Create or update User
 */
function _user_create($uid = null){
  if(!empty($uid)) {
    //update user
    $remote_user = _get_remote_user();
    $user = user_load($uid);
    //map information here

    #user_save($user);
    return $user->uid;
  } else {
    //create user
    $remote_user = _get_remote_user();

    #user_save($user);
    return $user->uid;
  }
}
/**
 * Slaves Sites
 * Sites where we want to create users
 * @return array of slave sites.
 */
function _get_slaves() {
  return variable_get('bakery_slaves', array());
}
/**
 * Master Site
 * @return string master site
 */
function _get_master() {
  return variable_get('bakery_master', 'http://www.upc.edu.pe/');
}
/**
 * Is Master?
 * Is this the master Site
 * @return TRUE/FALSE
 */
function _is_master() {
  return variable_get('bakery_is_master', 0);
}
/**
 * Secret Key
 * @return md5 string for crosssite verification
 */
function _secret_key() {
  //this is shared by all sites
  $key = variable_get('bakery_key', '');
  //@TODO add security measures here
  //maybe $key + time:minute 
  return md5($key);
}
