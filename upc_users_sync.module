<?php 
/** 
 * This module let share user information (additional fields) between master and 
 * slaves sites using curl (post) and several bakery functions.
 * All fields are hardcoded, so you have to erase them and add yours.
 * Theres a mapping function with rules on how to create the information to 
 * share, its pretty ease to understand.
 * @Author Cesar Perales
 * @mail cesar.perales@gmail.com
 */
/**
 * Implementation of Hook_menu
 */
function upc_users_sync_menu() {
  $items = array();
  $items['users_sync'] = array(
    'title' => 'Create Account',
    'page callback' => '_upc_users_sync_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/edit'] = array(
    'title' => 'Edit Account',
    'page callback' => '_upc_users_sync_edit',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 *  Create Users
 */
function _upc_users_sync_create() {
  $user = unserialize(base64_decode(bakery_decrypt($_POST['form'])));
  error_log(print_r($user,1));
  $errors = array();

  if (_is_master()){
    // Check mail.
    $account = user_load_by_mail($user['mail']);
    if ($account) {
      $errors[] = 'mail';
    }
    else {
      // Check username.
      $account = user_load_by_name($user['name']);
      if ($account) {
        $errors[] = 'mail';
      }
    }
  } 

  if(empty($errors)) {
    $new_account = _translate_terms($user);
    $account = user_save(NULL, $new_account);
    
    //if master and user  successfully created, send to slaves.
    if (_is_master() && !empty($account->uid)) {
      $slaves = _get_slaves();
      foreach($slaves as $slave) {
        error_log('send to : ' . $slave);
        _post_curl($user, $slave . 'users_sync');
      }
    }
    //start session
    $init = _bakery_init_field($account->uid);
    _bakery_bake_chocolatechip_cookie($account->name, $account->mail, $init);
    bakery_user_external_login($account);
  } else {
    watchdog('user', 'upc_users_sync: %name cant be created, already exists a account with same !error.', array('%name' => $account->name, '!error' => $errors[0]), WATCHDOG_WARNING, l(t('edit'), 'user/'. $account->uid .'/edit'));
    return drupal_json_output(array('message' => 2)); // 2 = Account already exists
  }
  return drupal_json_output(array('message' => 1)); // 1 = Account created
}
/**
 * Edit users
 */
function _upc_users_sync_edit(){
  $edit = unserialize(base64_decode(bakery_decrypt($_POST['form'])));
  error_log(print_r($user,1));
  $edit = _translate_terms($edit);
  $post = $edit;
  $errors = array();

  $slaves = _get_slaves();
  $master = _get_master();
  
  if(_is_master()) {
    //search users
    $account = user_load_by_mail($edit['mail']); 
    if(!$account) {
      $account = user_load_by_name($edit['name']);
    }
    if ($account){
      unset($edit['init']);
      unset($edit['name']);
      unset($edit['mail']);
      unset($edit['pass']);
      
      
      //lets try to save
      $save = user_save($account, $edit);
      if (!empty($save->uid)) {
        //send to slave
        foreach($slaves as $slave) {
          error_log('send to : ' . $slave);
          _post_curl($post, $slave . 'users_sync/edit');
        }
      }
    }
  } else {
    $account = user_load_by_mail($edit['mail']); 
    if(!$account) {
      $account = user_load_by_name($edit['name']);
    }
    if ($account){
      unset($edit['init']);
      unset($edit['name']);
      unset($edit['mail']);
      unset($edit['pass']);

      //try to save
      $save = user_save($account, $edit);
    } else {
      //do we create it if doesn't exist?
      //user_save('', $edit);
    }
  }
}
/**
 * Send user information to all sites.
 */
function _user_register_submit($form, &$form_state) {
  $user = new stdClass();
  $errors = array();

  $f = $form_state['values'];
  foreach($f as $index => $value) {
    $user->{$index} = $value;
  }

  $local = 'http://' .  $_SERVER['SERVER_NAME'] . '/';
  //account origin
  $user->field_account_origin['und'][0]['value'] = $local;

  //Map user here avoids remapping
  $new_account = _map_user($user);

  //send form
  $slaves = _get_slaves();
  $master = _get_master();

  //If master save user, on success send info to slaves
  //If slave just send info to master
  if (_is_master()) {
    // Check mail.
    $account = user_load_by_mail($new_account['mail']);
    if ($account) {
      $errors[] = 'mail';
    }
    else {
      // Check username.
      $account = user_load_by_name($new_account['name']);
      if ($account) {
        $errors[] = 'mail';
      }
    }
    //if no errors save user
    if(empty($errors)) {
      $account = user_save(NULL, $new_account);
      //if user save success, send info to slaves
      if(!empty($account->uid )) {
        foreach($slaves as $slave) {
          error_log('send to : ' . $slave)
          _post_curl($new_account, $slave . 'users_sync');
        }
      }
      $init = _bakery_init_field($account->uid);
      _bakery_bake_chocolatechip_cookie($account->name, $account->mail, $init);
      bakery_user_external_login($account);
    }

  } else {
    error_log('send to : ' . $master)
    _post_curl($new_account, $master . 'users_sync');
  }
}
/**
 * Edit user information
 */ 
function _user_profile_submit($form, &$form_state) {
  $user = new stdClass();
  $errors = array();
  $f = $form_state['values'];
  foreach($f as $index => $value) {
    $user->{$index} = $value;
  }

  //Map user here avoids remapping
  $edit = _map_user($user);
  $post = $edit;

  //send form
  $slaves = _get_slaves();
  $master = _get_master();

  if(_is_master()) {
    //search user
    $account = user_load_by_mail($edit['mail']); 
    if(!$account) {
      $account = user_load_by_name($edit['name']);
    }
    if ($account){
      unset($edit['init']);
      unset($edit['name']);
      unset($edit['mail']);
      unset($edit['pass']);

      //try to save
      $save = user_save($account, $edit);
      if (!empty($save->uid)) {
        foreach($slaves as $slave) {
          error_log('send to : ' . $slave)
          _post_curl($post, $slave . 'users_sync/edit');
        }
      }
    } 
  } else {
    //send to master
    error_log('send to : ' . $master)
    _post_curl($post, $master . 'users_sync/edit');
  }
}
/**
 * Implementation of hook_form_alter
 * Triggers _user_check function when submitting the register form
 */
function upc_users_sync_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['account']['name']['#type'] = 'textfield';
    unset($form['account']['name']['#value']);
    //overrides default and bakery submit functions
    $form['field_account_origin']['und'][0]['#access'] = FALSE;
    $form['#submit'] = array();
    $form['#submit'][] = '_user_register_submit'; 
  }
  if ($form_id == 'user_profile_form') {
    //overrides default and bakery submit functions
    $form['field_account_origin']['und'][0]['#access'] = FALSE;
    $form['#submit'] = array();
    $form['#submit'][] = '_user_profile_submit';
  }
}

function _post_curl($form,  $url) {
  //cURL version
  error_log(print_r($form,1));
  $curl = curl_init();
  curl_setopt_array($curl, array(
    CURLOPT_URL => $url,
    CURLOPT_RETURNTRANSFER => 1,
    //CURLOPT_HTTPHEADER => array('Content-type: application/json') ,
    CURLOPT_POST => 1,
    CURLOPT_POSTFIELDS => array(
        'form' => bakery_encrypt(base64_encode(serialize($form))),
    ),
  ));
  $resp = curl_exec($curl);
  error_log(print_r($resp,1));
  //curl_close($curl);
  if (!$resp) {
    return array('message' => 'Error ' . curl_errno($curl) . ' : ' .  curl_error($curl) ); 
  } else {
    return json_decode($resp);
  }
}
/**
 * Create User Array
 * Collect information from post and create an user array
 * to be use in user_save function
 * @param Object $post
 * @return array $user
 */
function _map_user($post) {
  $user = array();
  $map = _user_fields();

  $user['init'] = $post->mail;
  $user['status'] = 1;
  foreach ($map as $index => $value) {
    if(isset($post->{$index})) {
      switch ($value) {
        case 'direct':
          $user[$index] = $post->{$index};
          break;
        case 'value': 
          if(!empty($post->{$index}['und'][0]['value'])) {
            $user[$index] = array('und' => array(0 => array('value' => $post->{$index}['und'][0]['value'])));
          }
          break;
        case 'tid':
          if (is_array($post->{$index})) {
            if (isset($post->{$index}['und'][0]['tid'])) {
              foreach ($post->{$index}['und'] as $i => $a) {
                $term = taxonomy_term_load($post->{$index}['und'][$i]['tid']);
                $user[$index]['und'][$i] = array(
                    'term' => $term->name,
                    'tid' => $term->tid,
                    'vid' => $term->vocabulary_machine_name,
                    );
              }
            }
          }
          break;
        case 'marketing':
          $marketing = $post->{$index}['und'];  
          foreach($marketing as $i =>  $permission) {
            $user[$index]['und'][$i]['value'] = $post->{$index}['und'][$i]['value'];
          }
        break;
      }
    }
  }
  //complete user information
  /*if(!empty($userinfo['authname_bakery'])) {
    $user['authname_bakery'] = $userinfo['authname_bakery'];
  }*/
  return $user;
}
/**
 * Transform taxonomy term names in tid
 */
function _translate_terms($user) {
  $map = _user_fields();
  foreach ($map as $key => $value) {
    if($value == 'tid') {
      foreach($user[$key]['und'] as $i => $a) {
        $terms = taxonomy_get_term_by_name($user[$key]['und'][$i]['term'], $user[$key]['und'][$i]['vid']);
        foreach($terms as $term) {
          if($term->vocabulary_machine_name == $user[$key]['und'][$i]['vid']) {
            $user[$key]['und'][$i] = array(
                'term' => $term->name,
                'tid' => $term->tid,
                'vid' => $term->vocabulary_machine_name,
                );
          }
        }
      }
    } 
  }
  return $user;
}
/**
 * List of available fields
 */
function _user_fields(){ 
  return array(
    'name' => 'direct',
    'mail' => 'direct',
    'pass' => 'direct',
    'timezone' => 'direct',
    'field_permission_marketing' => 'value',
    
    'field_permission_marketing_epe' => 'marketing',
    'field_permission_marketing_pos' => 'marketing',
    'field_permission_marketing_pre' => 'marketing',
    
    'field_user_address' => 'value',
    'field_user_address_city' => 'value',
    'field_user_address_ubigeo' => 'tid',
    'field_user_address_urba' => 'value',
    'field_user_address_via' => 'tid',
    'field_user_birthday' => 'value',
    'field_document' => 'value',
    'field_document_type_term' => 'tid',
    'field_user_business_doc_type' => 'tid',
    'field_user_business_document' => 'value',
    'field_user_business_hq_address' => 'value',
    'field_user_business_hq_city' => 'value',
    'field_user_business_hq_phone' => 'value',
    'field_user_business_hq_ubigeo' => 'tid',
    'field_user_business_hq_urba' => 'value',
    'field_user_business_hq_via' => 'tid',
    'field_user_business_mail' => 'value',
    'field_user_business_name' => 'value',
    'field_user_courtesy_title_term' => 'tid', 
    'field_user_firstname' => 'value',
    'field_user_grade_term' => 'tid',
    'field_user_lastname' => 'value',
    'field_user_charge' => 'value',
    'field_user_level_charge' => 'tid',
    'field_user_work_area_term' => 'tid',
    'field_user_mobile_phone' => 'value',
    'field_user_mother_lastname' => 'value',
    'field_user_nationality' => 'value',
    'field_user_phone' => 'value',
    'field_user_sex' => 'value',
    'field_user_interest_area_term' => 'tid',

    'field_user_nick' => 'value',
    'field_user_business_code' => 'value',
    'field_user_business_hq_code' => 'value',
    'field_user_business_hq_name' => 'value',
    'field_user_socrates_code' => 'value',
    'field_reusable_observation' => 'value',
    //account origin
    'field_account_origin' => 'value',
  );
}
/**
 * Slaves Sites
 * Sites where we want to create users
 * @return array of slave sites.
 */
function _get_slaves() {
  return variable_get('bakery_slaves', array());
}
/**
 * Master Site
 * @return string master site
 */
function _get_master() {
  return variable_get('bakery_master', 'http://www.upc.edu.pe/');
}
/**
 * Is Master?
 * Is this the master Site
 * @return TRUE/FALSE
 */
function _is_master() {
  return variable_get('bakery_is_master', 0);
}
