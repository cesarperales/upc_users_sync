<?php 
/**
 * implementation of Hook_menu
 */
function upc_users_sync_menu() {
  $items = array();
  if(_is_master()){ 
    $items['users_sync/bakery'] = array(
      'title' => 'Check',
      'access callback' => 'user_is_anonymous',
      'page callback' => 'upc_users_sync_bakery_register',
      'type' => MENU_CALLBACK,
    );
  } else {
   $items['users_sync/bakery'] = array(
      'title' => 'Check',
      'access callback' => TRUE,
      'page callback' => 'upc_users_sync_bakery_register_return',
      'type' => MENU_CALLBACK,
    );
  }
  $items['users_sync/user_create'] = array(
    'title' => 'Crear cuenta',
    'page callback' => '_user_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_spread'] = array(
    'title' => 'Spread Users',
    'page callback' => '_user_spread',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['users_sync/user_test'] = array(
    'title' => 'Test Users',
    'page callback' => '_user_test',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}
/**
 * THIS IS A COPY OF BAKERY_REGISTER_RETURN() FUNCTION
 * ADDED PARTS ARE BEEN INDICATING
 * This function is called only in master
 *
 * Special Bakery register callback registers the user and returns to slave.
 */
function upc_users_sync_bakery_register() { 
  $cookie = bakery_taste_oatmeal_cookie();

  if ($cookie) {
    error_log('we are beeznest!');
    // Valid cookie.
    // Destroy the current oatmeal cookie, we'll set a new one when we return to the slave.
    _bakery_eat_cookie('OATMEAL');

    if (variable_get('user_register', 1)) {
      // Users are allowed to register.
      $data = array();
      // Save errors.
      $errors = array();
      $name = trim($cookie['data']['name']);
      $mail = trim($cookie['data']['mail']);

      // Check if user exists with same email.
      $account = user_load_by_mail($mail);
      if ($account) {
        $errors['mail'] = 1;
      }
      else {
        // Check username.
        $account = user_load_by_name($name);
        if ($account) {
          $errors['name'] = 1;
        }
      }
    }
    else {
      watchdog('bakery', 'Master Bakery site user registration is disabled but users are trying to register from a subsite.', array(), WATCHDOG_ERROR);
      $errors['register'] = 1;
    }

    if (empty($errors)) {
      // Create user.
      $userinfo = $cookie['data'];

      if (!$cookie['data']['pass']) {
        $pass = user_password();
      }
      else {
        $pass = $cookie['data']['pass'];
      }

      // Set additional properties.
      $userinfo['name'] = $name;
      $userinfo['mail'] = $mail;
      $userinfo['pass'] = $pass;
      $userinfo['init'] = $mail;
      $userinfo['status'] = 1;
      $userinfo['authname_bakery'] = $name;
      $user = _map_user($userinfo);
      $account = user_save('', $user);
      // Set some info to return to the slave.
      $data['uid'] = $account->uid;
      $data['mail'] = $mail;
      watchdog('user', 'New external user: %name using module bakery from slave !slave.', array('%name' => $account->name, '!slave' => $cookie['slave']), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));

      // Redirect to slave.
      if (!variable_get('user_email_verification', TRUE)) {
        // Create identification cookie and log user in.
        _bakery_bake_chocolatechip_cookie($account->name, $account->mail, url("user/$account->uid/edit", array('absolute' => TRUE)));
        bakery_user_external_login($account);
      }
      else {
        // The user needs to validate their email, redirect back to slave to
        // inform them.
        $errors['validate'] = 1;
      }
    }
    else {
      // There were errors.
      session_destroy();
    }

    // Redirect back to custom Bakery callback on slave.
    $data['errors'] = $errors;
    $data['name'] = $name;
    // Bake a new cookie for validation on the slave.
    bakery_bake_oatmeal_cookie($name, $data);
    error_log($cookie['slave']);
    drupal_goto($cookie['slave'] . 'users_sync/bakery');
  }
  // Invalid request.
  drupal_access_denied();


}
/**
 * THIS IS A COPY OF BAKERY_REGISTER_RETURN() FUNCTION
 * ADDED PARTS ARE BEEN INDICATING
 * This function is called only in slave
 * 
 * Custom return for slave registration process.
 *
 * Redirects to the homepage on success or to the register page if there was a problem.  
 */
function upc_users_sync_bamery_register_return() {

 $cookie = bakery_taste_oatmeal_cookie();

  if ($cookie) {
    // Valid cookie, now destroy it.
    _bakery_eat_cookie('OATMEAL');

    $errors = $cookie['data']['errors'];
    if (empty($errors)) {
      drupal_set_message(t('Registration successful. You are now logged in.'));
      // Redirect to front page.
      drupal_goto('<front>');
    }
    else {
      if (!empty($errors['register'])) {
        drupal_set_message(t('Registration is not enabled on @master. Please contact a site administrator.', array('@master' => variable_get('bakery_master', 'http://drupal.org/'))), 'error');
        watchdog('bakery', 'Master Bakery site user registration is disabled', array(), WATCHDOG_ERROR);
      }
      if (!empty($errors['validate'])) {
        // If the user must validate their email then we need to create an
        // account for them on the slave site.
        $new = array(
            'name' => $cookie['name'],
            'mail' => $cookie['data']['mail'],
            'init' => _bakery_init_field($cookie['data']['uid']),
            'status' => 1,
            'pass' => user_password(),
          );

        //THIS IS ADDED FOR UPC
        $user = _map_user($new);
        //END OF ADDED PART FOR UPC

        _user_mail_notify('register_no_approval_required', $account);
        unset($_SESSION['bakery']['register']);
        drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
      }
      if (!empty($errors['name'])) {
        drupal_set_message(t('Name is already taken.'), 'error');
      }
      if (!empty($errors['mail'])) {
        drupal_set_message(t('E-mail address is already registered.'), 'error');
      }
      if (!empty($errors['mail_denied'])) {
        drupal_set_message(t('The e-mail address has been denied access..'), 'error');
      }
      if (!empty($errors['name_denied'])) {
        drupal_set_message(t('The name has been denied access..'), 'error');
      }
      drupal_goto('user/register');
    }
  }
  drupal_access_denied();

}

/**
 * This is a copy of _bakery_register_submit without the redirection.
 */
function _user_register_submit($form, &$form_state) {
  //$form_state_copy = $form_state;
  // Create an array of fields to send to the master. We need these four fields.
  $allowed = array('name', 'mail', 'pass', 'timezone');
  foreach ($form_state['values'] as $key => $value) {
    if (!in_array($key, $allowed)) {
      unset($form_state['values'][$key]);
    }
  }
  // Remove unneeded values.
  form_state_values_clean($form_state);
  // Save values to cookie.
  $data = $form_state['values'];
  // Store name and email in case of error and return from master.
  $_SESSION['bakery']['register'] = array(
    'name' => $data['name'],
    'mail' => $data['mail'],
  );
  // Create cookie and redirect to master. 
  bakery_bake_oatmeal_cookie($data['name'], $data);
  //_user_spread($form, $form_state_copy, 'register');
  drupal_goto(variable_get('bakery_master', 'http://drupal.org/') . 'users_sync/bakery');
}
/**
 * Implementation of hook_form_alter
 * Triggers _user_check function when submitting the register form
 */
function upc_users_sync_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_register_form') {
    $form['#submit'] = array();
    //overrides default and bakery submit functions
    //default, graba en local
    //$form['#submit'][] = 'user_register_submit';  
    //graba en master
    $form['#submit'][] = '_user_register_submit'; 
  }
}

/**
 * Create User Array
 * Collect information from cookies and post and create an user array
 * to be use in user_save function
 * @return array $user
 */
function _map_user($userinfo) {
  $post = unserialize($_POST['form']);
  //TEST:
  /*global $user;
  $post = user_load($user->uid);*/
  $fields = array(
    'field_permission_marketing',
    'field_permission_marketing_epe',
    'field_permission_marketing_pos',
    'field_permission_marketing_pre',
    'field_reusable_observation',
    'field_user_address',
    'field_user_address_city',
    'field_user_address_ubigeo',
    'field_user_address_urba',
    'field_user_address_via',
    'field_user_birthday',
    'field_user_business_code',
    'field_user_business_doc_type',
    'field_user_business_document',
    'field_user_business_hq_address',
    'field_user_business_hq_city',
    'field_user_business_hq_code',
    'field_user_business_hq_name',
    'field_user_business_hq_phone',
    'field_user_business_hq_ubigeo',
    'field_user_business_hq_urba',
    'field_user_business_hq_via',
    'field_user_business_mail',
    'field_user_business_name',
    'field_user_charge',
    'field_user_courtesy_title_term',
    'field_user_firstname',
    'field_user_grade_term',
    'field_user_interest_area_term',
    'field_user_lastname',
    'field_user_level_charge',
    'field_user_mobile_phone',
    'field_user_mother_lastname',
    'field_user_nationality',
    'field_user_nick',
    'field_user_phone',
    'field_user_sex',
    'field_user_socrates_code',
  );
  $user = array(
    'name' => $userinfo['name'],
    'mail' => $userinfo['mail'],
    'init' => $userinfo['init'],
    'status' => 1,
    'pass' => user_password(),
  );

  if(!empty($userinfo['authname_bakery'])) {
    $user['authname_bakery'] = $userinfo['authname_bakery'];
  }
  
  foreach ($post as $label => $value) {
    if(in_array($label, $fields)) {
      if(!empty($post->$label)) {
        $user[$label] = $post->$label;
      }
    }
  }
  return $user;
}
/**
 * Create or update User
 */
function _user_create($uid = null){
  if(!empty($uid)) {
    //update user
    $remote_user = _get_remote_user();
    $user = user_load($uid);
    //map information here

    #user_save($user);
    return $user->uid;
  } else {
    //create user
    $remote_user = _get_remote_user();

    #user_save($user);
    return $user->uid;
  }
}
/**
 * Slaves Sites
 * Sites where we want to create users
 * @return array of slave sites.
 */
function _get_slaves() {
  return variable_get('bakery_slaves', array());
}
/**
 * Master Site
 * @return string master site
 */
function _get_master() {
  return variable_get('bakery_master', 'http://www.upc.edu.pe/');
}
/**
 * Is Master?
 * Is this the master Site
 * @return TRUE/FALSE
 */
function _is_master() {
  return variable_get('bakery_is_master', 0);
}
/**
 * Secret Key
 * @return md5 string for crosssite verification
 */
function _secret_key() {
  //this is shared by all sites
  $key = variable_get('bakery_key', '');
  //@TODO add security measures here
  //maybe $key + time:minute 
  return md5($key);
}
